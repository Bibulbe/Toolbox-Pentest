import subprocess
import re
import validators

def website_search(url):
    # Exécuter la commande theHarvester
    result = subprocess.check_output(f"theHarvester -d {url} -l 500 -b all", shell=True)

    print("Analysis in progress, please be patient...")

    # Afficher le résultat
    print(result.decode())


def dirbuster_cli():
    # Ask the user to enter a valid website URL
    while True:
        site_web = input("Enter a valid website URL (e.g. https://www.google.com/): ")
        if validators.url(site_web):
            break
        print("Invalid website URL. Please enter a valid URL.")

    # Ask the user if they want to perform a deep analysis
    while True:
        response = input("Do you want to perform a deep analysis? (yes/no) ")
        if response.lower() == "yes":
            # Use options for a deep analysis
            options = ["-fwr"]
            wordlist = "/usr/share/dirb/wordlists/common.txt"
            break
        elif response.lower() == "no":
            # Use options for a quick analysis
            options = ["-fr", "-z", "10"]
            wordlist = "/usr/share/dirb/wordlists/small.txt"
            break
        else:
            print("Please answer 'yes' or 'no'.")

    # Define the dirbuster command
    command = "dirb"
    # Define the options and arguments for the command
    arguments = [site_web] + [wordlist] + options
    print("Analysis in progress, please be patient...")
    # Concatenate the options and arguments into a single list
    cmd = [command] + arguments
    # Execute the command and retrieve the results in real-time
    process = subprocess.Popen(cmd, stdout=subprocess.PIPE, universal_newlines=True)
    pattern = r"\+ (\S+) \(CODE:(\d+)\|SIZE:(\d+)\)"
    joignables = []
    for stdout_line in iter(process.stdout.readline, ""):
        match = re.search(pattern, stdout_line)
        if match:
            link = match.group(1)
            code = match.group(2)
            if code.startswith("2") or code.startswith("3"):
                joignables.append(link)

    # Display the results
    print("Joinable links:")
    for link in joignables:
        print(link)
