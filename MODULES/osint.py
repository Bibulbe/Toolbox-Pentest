import subprocess
import re
import validators

def website_search(url):
    # Exécuter la commande theHarvester
    result = subprocess.check_output(f"theHarvester -d {url} -l 500 -b all", shell=True)

    print("Analysis in progress, please be patient...")

    # Afficher le résultat
    print(result.decode())


def dirbuster_cli():
    # Demander à l'utilisateur de saisir un site web valide
    while True:
        site_web = input("Enter a valid website (ex: https://www.google.com/) : ")
        if validators.url(site_web):
            break
        print("Invalid website. Please enter a valid URL.")

    # Demander à l'utilisateur s'il souhaite effectuer une analyse poussée
    while True:
        response = input("Do you want to perform a thorough analysis? (yes/no) ")
        if response.lower() == "yes":
            # Utiliser les options pour une analyse poussée
            options = ["-fwr"]
            wordlist = "/usr/share/dirb/wordlists/common.txt"
            break
        elif response.lower() == "no":
            # Utiliser les options pour une analyse rapide
            options = ["-fr", "-z", "10"]
            wordlist = "/usr/share/dirb/wordlists/small.txt"
            break
        else:
            print("Please answer 'yes' or 'no'.")

    # Définition de la commande dirbuster
    command = "dirb"
    # Définition des options et arguments de la commande
    arguments = [site_web] + [wordlist] + options
    print("Analysis in progress, please wait...")
    # Concaténation des options et arguments en une seule liste
    cmd = [command] + arguments
    # Exécution de la commande et récupération des résultats en temps réel
    process = subprocess.Popen(cmd, stdout=subprocess.PIPE, universal_newlines=True)
    pattern = r"\+ (\S+) \(CODE:(\d+)\|SIZE:(\d+)\)"
    joignables = []
    # Use tqdm to create a progress bar for reading the process output
    for stdout_line in tqdm(iter(process.stdout.readline, ""), desc="Progress"):
        match = re.search(pattern, stdout_line)
        if match:
            link = match.group(1)
            code = match.group(2)
            if code.startswith("2") or code.startswith("3"):
                joignables.append(link)

    # Afficher les résultats
    print("Accessible links:")
    for link in joignables:
        print(link)
