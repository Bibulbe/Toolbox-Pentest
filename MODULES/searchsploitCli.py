import os
import re

import requests
import json
import subprocess


class googledorkgenerator():
    def __init__(self):
        self.inTitle = ''
        self.inUrl = ''
        self.domain = ''
        self.fileType = ''
        self.textQuarry = ''
        self.googledork = ''

    def setTitle(self, title):
        self.inTitle = title

    def setUrl(self, url):
        self.inUrl = url

    def setDomain(self, site):
        self.domain = site

    def setFileType(self, type):
        self.fileType = type

    def setText(self, text):
        self.textQuarry = text

    def generate(self):
        if self.textQuarry:
            self.googledork += f'{self.textQuarry} '
        if self.inTitle:
            self.googledork += f'intitle:{self.inTitle} '
        if self.inUrl:
            self.googledork += f'inurl:{self.inUrl} '
        if self.domain:
            self.googledork += f'site:{self.domain} '
        if self.fileType:
            self.googledork += f'filetype:{self.fileType}'

        return self.googledork

    def presetDork(self):
        print('1) Directory listing (Index of)')
        print('2) Spreadsheets: xlsx, xls, ods, csv, tsv')
        print('3) Text documents: docx, doc, odt, rtf, pdf, txt')
        print('4) Slide presentations: pptx, ppt, odp, pdf')
        print('5) File database.yml ')
        print('6) No presset')

        chose = input('Chose a preset : ')

        if chose == '1':
            self.setTitle('Index of')
        elif chose == '2':
            self.setTitle('(xlsx | xls | ods | csv | tsv)')
        elif chose == '3':
            self.setTitle('(docx  | doc | odt | rtf | pdf | txt)')
        elif chose == '4':
            self.setUrl('database')
            self.setFileType('yml')

def formatUrl(noUrl):
    noUrl = noUrl.replace('+', '\+')
    noUrl = noUrl.replace(' ', '+')
    noUrl = noUrl.replace(':', '%3A')
    noUrl = noUrl.replace('(', '%281')
    noUrl = noUrl.replace(')', '%29')

    url = f'https://www.google.com/search?q={noUrl}'
    return url

def cleanColor(ligne):
    cleaned = re.sub('\x1B\[([0-9]{1,3}(;[0-9]{1,2};?)?)?[mGK]', '', ligne)
    cleaned.replace('  ', '')
    return cleaned


def exploitdbSearch(input_command):
    command = "searchsploit"
    command_run = subprocess.Popen([command, input_command], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    out, err = command_run.communicate()

    command_result = (out.decode())
    Lignes = [cleanColor(character) for character in command_result.split('\n')][3:-1]
    if len(Lignes) > 0:
        Lignes.pop()
        Lignes.pop()

    droplist = []
    for Ligne in Lignes:
        if not len(Ligne.replace('-', '').strip()):
            droplist.append(Ligne)

    for dropl in droplist:
        Lignes.remove(dropl)

    try:
        Lignes.remove(' Shellcode Title                    |  Path')
    except:
        pass

    Lignesindict = [{'titre': Ligne.split(' -')[0], 'type': (Ligne.split(' -')[1]).split(' | ')[0],
                     'fichier': (" ".join(Ligne.split('-')[1::]).split('|')[1]).replace(' ', '')} for Ligne in Lignes]

    return (Lignesindict)
