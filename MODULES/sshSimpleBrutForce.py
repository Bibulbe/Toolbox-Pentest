import os
from ftplib import FTP, FTP_TLS
from time import sleep

import paramiko
from paramiko import SSHClient


def sshConnection(host, port=22, user='', passwd=''):
    try:
        # Initialisation du client SSH
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())

        # Connexion au serveur avec les identifiants fournis
        client.connect(host, username=user, port=port, password=passwd)

        # Fermeture de la connexion
        client.close()

        # Retourne les identifiants utilisés si la connexion a réussi
        return user, passwd
    except paramiko.ssh_exception.AuthenticationException:
        # Mauvais identifiants
        return False
    except paramiko.ssh_exception.SSHException:
        # Problème de connexion SSH
        return False
    except:
        # Autres erreurs
        return False

def ftpConnection(host, port=21, user='', passwd=''):
    # Configuration de l'hôte, l'utilisateur et le mot de passe
    host = host
    username = user
    password = passwd
    port = 21

    # Si aucun nom d'utilisateur et mot de passe n'est fourni, essayer de se connecter en tant qu'utilisateur anonyme
    if not user and not passwd:
        try:
            ftp = FTP()
            ftp.connect(host, port)
            ftp.connect()
            ftp.quit()
            return "anonymous", ""
        except:
            # Si la connexion est refusée, renvoyer False
            return False

    # Sinon, essayer de se connecter avec les identifiants fournis
    try:
        ftp = FTP()
        ftp.connect(host, port)
        ftp.login(username, password)
        ftp.quit()
        return username, password

    except:
        # Si la connexion est refusée, renvoyer False
        return False



def ftpsConnection(host, port=21, user='', passwd=''):
    # On initialise les variables avec les valeurs passées en paramètre
    host = host
    username = user
    password = passwd

    # Si aucun utilisateur ni mot de passe n'ont été spécifiés, on essaie une connexion anonyme
    if not user and not passwd:
        try:
            ftp = FTP_TLS()
            ftp.connect(host, port)
            ftp.connect()
            ftp.quit()
            return "anonymous", ""
        except:
            # Si la connexion échoue, on retourne False
            return False

    # Sinon, on essaie une connexion avec l'utilisateur et le mot de passe spécifiés
    try:
        ftp = FTP_TLS()
        ftp.connect(host, port)
        ftp.login(username, password)
        ftp.quit()
        return username, password

    except:
        # Si la connexion échoue, on retourne False
        return False


def ftpSimpleBruteForce(ip, port):
    """
    Cette fonction prend en paramètre l'adresse IP et le port d'un serveur FTP, lit une liste d'identifiants et de
    mots de passe stockée dans un fichier texte, puis essaie de se connecter au serveur FTP avec chaque paire d'identifiants/mots de passe
    jusqu'à ce qu'elle trouve la bonne paire ou qu'elle ait épuisé la liste.

    Args:
        ip (str): l'adresse IP du serveur FTP.
        port (int): le numéro de port du serveur FTP.

    Returns:
        Union[bool, Tuple[str, str]]: retourne un tuple contenant la bonne paire d'identifiants/mots de passe si elle est trouvée, False sinon.
    """
    with open('RESSOURCES/ftp.txt', 'r') as lignes:
        for ligne in lignes.readlines():
            ligne = ligne.strip()
            login = ligne.split(':')[0]
            mdp = ligne.split(':')[1]
            result = ftpConnection(ip, login, mdp)
            if result:
                return (result)
        return (False)



def ftpsSimpleBruteForce(ip, port):
    # Ouverture du fichier contenant les identifiants de connexion
    with open('RESSOURCES/ftp.txt', 'r') as lignes:
        # Parcours de chaque ligne du fichier
        for ligne in lignes.readlines():
            ligne = ligne.strip()
            # Extraction du login et du mot de passe de la ligne
            login = ligne.split(':')[0]
            mdp = ligne.split(':')[1]
            # Tentative de connexion avec les identifiants extraits
            result = ftpsConnection(ip, port, login, mdp)
            # Si la connexion est réussie, retourner le résultat
            if result:
                return (result)
        # Si toutes les tentatives échouent, retourner False
        return (False)


def sshSimpleBruteForce(ip, port, display=True):
    """
    Cette fonction prend en entrée une adresse IP, un port, et une variable booléenne "display" qui permet d'afficher
    ou non les tests de connexion. Elle tente de se connecter en SSH à l'hôte correspondant en utilisant une liste
    de paires login/mot de passe stockée dans le fichier "ssh.txt" dans le dossier RESSOURCES. Si une connexion
    réussit, la fonction retourne les informations de connexion. Sinon, elle retourne False.

    Args:
    - ip : str : l'adresse IP de l'hôte à tester
    - port : int : le port SSH de l'hôte à tester
    - display : bool : variable qui permet d'afficher les tests de connexion ou non

    Returns:
    - False si la connexion SSH a échoué
    - Un tuple contenant les informations de connexion si la connexion a réussi
    """

    # Ouverture du fichier "ssh.txt" en lecture
    with open('RESSOURCES/ssh.txt', 'r') as lignes:

        # Pour chaque ligne du fichier, on récupère le login et le mot de passe correspondants
        for ligne in lignes.readlines():
            ligne = ligne.strip()
            login = ligne.split(':')[0]
            mdp = ligne.split(':')[1]

            # Si l'argument "display" est True, on affiche les tests de connexion
            if display:
                print('Test - {login} / {password}'.format(login=login, password=mdp))

            # On tente de se connecter en SSH avec le login et le mot de passe actuels
            result = sshConnection(ip, port, login, mdp)

            # Si la connexion réussit, on affiche les informations de connexion et on les retourne
            if result:
                if display:
                    print('Work with - {login} / {password}'.format(login=login, password=mdp))
                return (result)

        # Si aucune connexion n'a réussi, on retourne False
        return (False)


if __name__ == '__main__':
    sshSimpleBruteForce('127.0.0.1', 22)
    #sshConnection('127.0.0.1',22,'user','user')
