import nmap # Import de la bibliothèque NMAP
def Nmap_classic(target):
    print("NMAP scan starts, please wait")
    target = str(target)
    nm = nmap.PortScanner()
    resultat = ""
    versions_all = {}  # Création de la liste qui va stocker les versions
    nm.scan(target)
    for host in nm.all_hosts():
        resultat += f"Host: {host} {nm[host].hostname()}\n" # Recherche le nom de la machine cible
        resultat += f"State: {nm[host].state()}\n" # Recherche le statut de chaque port scanné
        for proto in nm[host].all_protocols(): # Boucle sur chaque port scanné
            resultat += f"PORT\t\tSTATE\t\tPRODUCT\t\tVERSION\n"
            lport = nm[host][proto].keys()
            for port in lport:
                if len(str(port) + str("/") + str(proto)) < 8:
                    space = "\t\t"
                else:
                    space = "\t"
                product = nm[host][proto][port]['product'] # Formatage pour chaque produit par port scanné
                version = nm[host][proto][port]['version'] # Formatage pour chaque version du produit scanné scanné
                state = nm[host][proto][port]['state'] # Formatage pour chaque statut de port scanné
                resultat += f"{port}/{proto}{space}{state}\t\t{product}\t\t{version}\n" # Formatage pour un tableau
                versions_all[product] = version # Création d'un dictionnaire produit avec version
    return resultat, versions_all # Renvoie le tableau et le dictionnaire
def NmapC(target):
    print("NMAP scan starts, please wait")
    target = str(target)
    nm = nmap.PortScanner()
    resultat = ""
    versions_all = {}  # Création de la liste qui va stocker les versions
    nm.scan(target)
    return nm
def Nmap_silent(target):
    print("NMAP scan starts silently, please wait")
    target = str(target)
    nm = nmap.PortScanner()
    resultat = ""
    nm.scan(target, arguments='-sS') # Ajoute de l'option ss pour faire un scan silencieux
    for host in nm.all_hosts():
        resultat += f"Host: {host} {nm[host].hostname()}\n" # Recherche le nom de la machine cible
        resultat += f"State: {nm[host].state()}\n" # Recherche le statut de chaque port scanné
        for proto in nm[host].all_protocols(): # Boucle sur chaque port scanné
            resultat += f"-------------------\n"
            resultat += f"PORT\t\tSTATE\n"
            lport = nm[host][proto].keys()
            for port in lport:
                if len(str(port) + str("/") + str(proto)) < 8:
                    space = "\t\t"
                else:
                    space = "\t"
                state = nm[host][proto][port]['state']
                resultat += f"{port}/{proto}{space}{state}\n" # Formatage pour un tableau
            resultat += f"-------------------\n"
    return resultat # Renvoie le tableau
def afficheNmap(nm):
    displayInfo = ''
    for host in nm.all_hosts():
        displayInfo = f"Hôte : {host} {nm[host].hostname()}\n"
        displayInfo += f"Status : {nm[host].state()}\n"
        for protocol in nm[host].all_protocols():
            displayInfo += "PORT\t\tSTATE\t\tPRODUCT\t\tVERSION\n"
            lport = nm[host][protocol].keys()
            for port in lport:
                if len(str(port) + str("/") + str(protocol)) < 8:
                    space = "\t\t"
                else:
                    space = "\t"
                product = nm[host][protocol][port]['product'] # Formatage pour chaque produit par port scanné
                version = nm[host][protocol][port]['version'] # Formatage pour chaque version du produit scanné scanné
                state = nm[host][protocol][port]['state'] # Formatage pour chaque statut de port scanné
                displayInfo += f"{port}/{protocol}{space}{state}\t\t{product}\t\t{version}\n"
    return displayInfo