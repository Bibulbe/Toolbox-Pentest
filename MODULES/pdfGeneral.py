# Importez les bibliothèques nécessaires
import io
from markdown import markdown
from md2pdf import md2pdf
from weasyprint import HTML
import MODULES.searchsploitCli as searchsploit


# def md2pdf():
#     # Définissez le contenu Markdown
#     with open('../AUDIT_TEMPLATE/AUDIT_TEMPLATE.md', 'r') as txt:
#         markdown_content = txt.read()
#
#     # Convertissez le contenu Markdown en HTML
#     html_content = markdown(markdown_content)
#
#     # Créez un fichier PDF en mémoire
#     pdf_buffer = io.BytesIO()
#     HTML(string=html_content).write_pdf(pdf_buffer)
#
#     # Récupérez les données du PDF en mémoire
#     pdf_data = pdf_buffer.getvalue()
#
#     # Ouvrez un fichier en écriture
#     with open('file.pdf', 'wb') as f:
#         # Écrivez les données du PDF dans le fichier
#         f.write(pdf_data)


def list2graphical(varlist):
    returnlist = ''
    for ligne in varlist:
        returnlist += ('- ' + ligne + ' \n')
    return returnlist


def dict2bckreturn(varlist):
    returnvalue = ''
    for ligne in varlist:
        returnvalue += (
            '{port}/{protocol}:{product}-{version}<br>'.format(port=ligne['port'], protocol=ligne['protocol'],
                                                               product=ligne['product'], version=ligne['version']))
    return returnvalue


def nmap_dictionarisation(nm):
    services = []
    for host in nm.all_hosts():
        for protocol in nm[host].all_protocols():
            lport = nm[host][protocol].keys()
            for port in lport:
                product = nm[host][protocol][port]['product']
                version = nm[host][protocol][port]['version']
                state = nm[host][protocol][port]['state']
                services.append(
                    {'ip': host, 'nom': nm[host].hostname(), 'port': port, 'protocol': protocol, 'product': product,
                     'version': version})
    return services


def nmap2table(nm):
    returnlist = ''
    services = []
    for host in nm.all_hosts():
        for protocol in nm[host].all_protocols():
            lport = nm[host][protocol].keys()
            for port in lport:
                product = nm[host][protocol][port]['product']
                version = nm[host][protocol][port]['version']
                state = nm[host][protocol][port]['state']
                services.append({'port': port, 'protocol': protocol, 'product': product, 'version': version})
        returnlist += (
            '| {ip}| {nom}| {services}|\n'.format(ip=host, nom=nm[host].hostname(), services=dict2bckreturn(services)))
    return returnlist


def vulnnmap(nmap):
    resultlist = {}
    for scan in nmap_dictionarisation(nmap):
        if scan['product'] or scan['version']:
            exploitformat = scan['product'] + ' ' + scan['version'].split(' ')[0]
            # exploitformat = "OpenSSH 7.0P1"
            vulnlist = [vuln['titre'] + ' : ' + vuln['type'] for vuln in searchsploit.exploitdbSearch(exploitformat)]
            if scan['nom']:
                resultlist['{ip}:{port} {service} - {nom}'.format(nom=scan['nom'], ip=scan['ip'], port=scan['port'],
                                                                  service=(exploitformat))] = vulnlist
            else:
                resultlist['{ip}:{port} {service}'.format(ip=scan['ip'], port=scan['port'],
                                                          service=(exploitformat))] = vulnlist
    return resultlist


def simplify_vulnnmap(vulnnmap):
    #print(vulnnmap)
    resultdict = {}
    for key, value in vulnnmap.items():
        resultlist = []
        if value:
            resultlist = [vuln.split(':')[0] for vuln in value]
            resultdict[key] = list(dict.fromkeys(resultlist))
    return resultdict


def simplify_vulnnmap2(vulnnmap):
    resultdict = {}
    for key, value in vulnnmap.items():
        resultlist = []
        if value:
            resultlist = [vuln.split(':')[1:] for vuln in value]
            resultdict[key] = resultlist
        else:
            resultdict[key] = []
    return resultdict


def converttotable(var_dict):
    outvalue = ''
    for key in var_dict.keys():
        print(var_dict)
        outvalue += '| {key}| {service}|\n'.format(key=key.split(' ')[0], service=''.join(key.split(' ')[1::]))
    return outvalue


def passwrdformattotable(pass_list):
    foundoutvalue = ''
    notfoundoutvalue = ''
    for value in pass_list:
        service = value[0]
        passwd = value[1]
        servicePort = (service.split(':')[1]).split(' ')[0]
        serviceServer = (service.split(':')[0])
        if passwd:
            login = passwd[0]
            mdp = passwd[1]
            foundoutvalue += f'| {serviceServer} | {servicePort} | {login}/{mdp} |'
        else:
            notfoundoutvalue += f'| {serviceServer} | {servicePort} | Not Found |'
        return foundoutvalue, notfoundoutvalue


def format_vulnmap(vulnnmap):
    retunvalue = ''
    for key, value in vulnnmap.items():
        if value:
            retunvalue += ' - {key}\n\t- {value}\n'.format(key='{}'.format(key), value='\n\t- '.join(value))
    return retunvalue


def generate_markdown(nmap, pass_list=None):
    with open('AUDIT_TEMPLATE/AUDIT_TEMPLATE.md', 'r') as f:
        outvalue = (f.read().format(networklist=list2graphical(nmap.all_hosts()), listeIPtable=nmap2table(nmap)))
    listvuln = vulnnmap(nmap)
    if not all(val == False for val in [bool(i) for i in list(listvuln.values())]):
        simplified_listvuln = simplify_vulnnmap(listvuln)
        table_listvuln = converttotable(simplified_listvuln)
        with open('AUDIT_TEMPLATE/AUDIT_TEMPLATE_VULN.md', 'r') as f:
            outvalue += (f.read().format(vulnlist=format_vulnmap(listvuln), tableupdate=table_listvuln))
    if pass_list:
        with open('AUDIT_TEMPLATE/AUDIT_TEMPLATE_VULN.md', 'r') as f:
            passwrd = passwrdformattotable(pass_list)
            found = passwrd[0]
            notfound = passwrd[1]
            allservice = '\n - ' + '\n - '.join((found + notfound)[0])
            outvalue += (f.read().format(servicelist=allservice, serviceFound=found, servicenotFound=notfound))

    return outvalue


def markdown2pdf(source, destination):
    md2pdf(destination,
           md_content=source,
           md_file_path=None,
           css_file_path='AUDIT_TEMPLATE/doc.css',
           base_url=None)


if __name__ == "__main__":
    import nmap
    import ScanPort

    network2scan = "192.168.243.128"
    scan = ScanPort.NmapC(network2scan)

    print(
        markdown2pdf(generate_markdown(scan), '/home/user/toto.pdf')
    )
