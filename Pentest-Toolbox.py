##Import des bibliothèques et autres programme##
import pyfiglet
import sys

from datetime import datetime
from MODULES.pdfGeneral import nmap2table, nmap_dictionarisation, vulnnmap, simplify_vulnnmap, simplify_vulnnmap2, \
    markdown2pdf
from MODULES.ScanPort import Nmap_silent, NmapC
from MODULES.sshSimpleBrutForce import sshSimpleBruteForce
from MODULES.sshSimpleBrutForce import ftpsSimpleBruteForce
from MODULES.sshSimpleBrutForce import ftpSimpleBruteForce
from MODULES.searchsploitCli import exploitdbSearch
from MODULES.pdfGeneral import generate_markdown




##Scanning Menu##
def scan_submenu():
    print(pyfiglet.figlet_format("Scanning Menu"))
    print("1-NMAP classic")
    print("2-NMAP silent")
    print("3-Back to main menu")
    print("4-Quit")
    choice = input("Choose an option : ")
    if choice == "1":
        target = str(input("Set target IP\n> "))
        resultat = NmapC(target)
        varvulnmap = vulnnmap(resultat)
        nmapWithVuln = simplify_vulnnmap2(varvulnmap)
        ip = ''
        listservice = []
        for key, value in nmapWithVuln.items():
            if ip != key.split(':')[0]:
                ip = key.split(':')[0]
                hostname = (' '.join(key.split(':')[1:])).split(' - ')
                print('-' * 20)
                if len(hostname) > 1:
                    print(key.split(':')[0] + ' ' + ''.join(hostname[-1]))
                else:
                    print(key.split(':')[0])
                print('-' * 20)
                print('Port\tService\t\t\tVersion\t\tExploit')
            service = (''.join(' '.join(key.split(':')[1:]).split(' - ')[0::-2])).replace(' ', '\t\t', 1).replace(' ',
                                                                                                                  '\t',
                                                                                                                  -1)
            if not value:
                exploit = 0
            else:
                exploit = len(value)
            print('{service}\t\t{exploit}'.format(service=service, exploit=exploit))
            listservice.append(service)

        for key in nmapWithVuln.keys():
            service = (''.join(' '.join(key.split(':')[1:]).split(' - ')[0::-2])).replace(' ', '\t\t', 1).replace(' ',
                                                                                                                  '\t',
                                                                                                                  -1)
            if "SSH" in (service).upper():
                print('test ssh')
            elif "FTP" in (service).upper():
                print('test ftp')
        export_submenu(resultat, nmapWithVuln)
    elif choice == "2":
        target = str(input("Set target IP\n> "))
        resultat = Nmap_silent(target)
        scan_submenu()
    elif choice == "3":
        main_menu()
    elif choice == "4":
        sys.exit()
    else:
        print("Invalid option, please try again.")
        scan_submenu()





##Export Section##
def export_submenu(nmap, nmapWithVuln):
    print('[0] Return to Scan Menu [1] Export to pdf [2] Show vuln [3] Quit')
    choice = input("Choisissez une option : ")
    if choice == "0":
        scan_submenu()
    elif choice == "1":
        now = datetime.now()
        date_time_str = now.strftime("%d%m%Y%H%M")
        exit = input("Put the path where you want to save the file (ex:/home/) : ")
        exit += "Exploit" + date_time_str + ".pdf"
        markdown2pdf(generate_markdown(nmap), exit)
        scan_submenu()
    elif choice == "2":
        dropkeylist = []
        for key, value in nmapWithVuln.items():
            if not len(value):
                dropkeylist += [key]

        for dropkey in dropkeylist:
            del nmapWithVuln[dropkey]

        if len(nmapWithVuln):

            for (i, item) in enumerate(nmapWithVuln.keys(), start=0):
                print('{i}) {item}'.format(i=i, item=item))

            choice = input('choose the service whose vulnerabilities you want to see : ')
            keychoise = list(nmapWithVuln.keys())[int(choice)]
            print("\n".join(["".join(i) for i in nmapWithVuln[keychoise]]))
            export_submenu(nmap, nmapWithVuln)

    elif choice == "3":
        sys.exit()




##Exploit Menu##
def exploit_submenu():
    print(pyfiglet.figlet_format("Exploit Menu"))
    print("1-Vuln discover")
    print("2-Brut Force")
    print("3-Retour au menu principal")
    print("4-Quit")
    choice = input("Choisissez une option : ")
    if choice == "1":
        targetService = input('Enter the service and version for which you want to find vulnerabilities : ')
        for vuln in exploitdbSearch(targetService):
            print("{nom} - {type} \t\t\t - Path to exploit : {file}".format(nom=vuln['titre'], type=vuln['type'],
                                                                            file=vuln['fichier']))
        input('Press Enter for return to submenu')
        exploit_submenu()
    elif choice == "2":
        brutforce_submenu()
    elif choice == "3":
        main_menu()
    elif choice == "4":
        sys.exit()
    else:
        print("Invalid option, please try again.")
        exploit_submenu()




##Bruteforce section##
def brutforce_submenu():
    print(pyfiglet.figlet_format("Brut Force Menu"))
    print("1-SSH")
    print("2-FTP")
    print("3-FTPS")
    print("4-Back to main menu")
    print("5-Quit")
    choice = input("Choose an option : ")
    if choice == "1":
        targetIP = str(input("Set target IP\n> "))
        sshSimpleBruteForce(targetIP,22)
        brutforce_submenu()
    elif choice == "2":
        targetIP = str(input("Set target IP\n> "))
        ftpSimpleBruteForce(targetIP,21)
        brutforce_submenu()
    elif choice == "3":
        targetIP = str(input("Set target IP\n> "))
        ftpsSimpleBruteForce(targetIP,21)
        brutforce_submenu()
    elif choice == "4":
        main_menu()
    elif choice == "5":
        sys.exit()
    else:
        print("Invalid option, please try again.")
        brutforce_submenu()




##Main execution##
def main_menu():
    print("⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⡠⢤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡴⠟⠃⠀⠀⠙⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠋⠀⠀⠀⠀⠀⠀⠘⣆⠀⠀⠀⠀⠀⠀⠀⠀\n"
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠾⢛⠒⠀⠀⠀⠀⠀⠀⠀⢸⡆⠀⠀⠀⠀⠀⠀⠀\n"
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣶⣄⡈⠓⢄⠠⡀⠀⠀⠀⣄⣷⠀⠀⠀⠀⠀⠀⠀\n"
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣷⠀⠈⠱⡄⠑⣌⠆⠀⠀⡜⢻⠀⠀⠀⠀⠀⠀⠀\n"
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⡿⠳⡆⠐⢿⣆⠈⢿⠀⠀⡇⠘⡆⠀⠀⠀⠀⠀⠀\n"
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⣿⣷⡇⠀⠀⠈⢆⠈⠆⢸⠀⠀⢣⠀⠀⠀⠀⠀⠀\n"
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣧⠀⠀⠈⢂⠀⡇⠀⠀⢨⠓⣄⠀⠀⠀⠀\n"
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⣿⣦⣤⠖⡏⡸⠀⣀⡴⠋⠀⠈⠢⡀⠀⠀\n"
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⠁⣹⣿⣿⣿⣷⣾⠽⠖⠊⢹⣀⠄⠀⠀⠀⠈⢣⡀\n"
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡟⣇⣰⢫⢻⢉⠉⠀⣿⡆⠀⠀⡸⡏⠀⠀⠀⠀⠀⠀⢇\n"
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢨⡇⡇⠈⢸⢸⢸⠀⠀⡇⡇⠀⠀⠁⠻⡄⡠⠂⠀⠀⠀⠘\n"
          "⢤⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠛⠓⡇⠀⠸⡆⢸⠀⢠⣿⠀⠀⠀⠀⣰⣿⣵⡆⠀⠀⠀⠀\n"
          "⠈⢻⣷⣦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡿⣦⣀⡇⠀⢧⡇⠀⠀⢺⡟⠀⠀⠀⢰⠉⣰⠟⠊⣠⠂⠀⡸\n"
          "⠀⠀⢻⣿⣿⣷⣦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⢧⡙⠺⠿⡇⠀⠘⠇⠀⠀⢸⣧⠀⠀⢠⠃⣾⣌⠉⠩⠭⠍⣉⡇\n"
          "⠀⠀⠀⠻⣿⣿⣿⣿⣿⣦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣞⣋⠀⠈⠀⡳⣧⠀⠀⠀⠀⠀⢸⡏⠀⠀⡞⢰⠉⠉⠉⠉⠉⠓⢻⠃\n"
          "⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣷⡄⠀⠀⢀⣀⠠⠤⣤⣤⠤⠞⠓⢠⠈⡆⠀⢣⣸⣾⠆⠀⠀⠀⠀⠀⢀⣀⡼⠁⡿⠈⣉⣉⣒⡒⠢⡼⠀\n"
          "⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣎⣽⣶⣤⡶⢋⣤⠃⣠⡦⢀⡼⢦⣾⡤⠚⣟⣁⣀⣀⣀⣀⠀⣀⣈⣀⣠⣾⣅⠀⠑⠂⠤⠌⣩⡇⠀\n"
          "⠀⠀⠀⠀⠀⠀⠘⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡁⣺⢁⣞⣉⡴⠟⡀⠀⠀⠀⠁⠸⡅⠀⠈⢷⠈⠏⠙⠀⢹⡛⠀⢉⠀⠀⠀⣀⣀⣼⡇⠀\n"
          "⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣿⣿⣿⣿⣿⣿⣿⣿⣽⣿⡟⢡⠖⣡⡴⠂⣀⣀⣀⣰⣁⣀⣀⣸⠀⠀⠀⠀⠈⠁⠀⠀⠈⠀⣠⠜⠋⣠⠁⠀\n"
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⡟⢿⣿⣿⣷⡟⢋⣥⣖⣉⠀⠈⢁⡀⠤⠚⠿⣷⡦⢀⣠⣀⠢⣄⣀⡠⠔⠋⠁⠀⣼⠃⠀⠀\n"
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣿⣿⡄⠈⠻⣿⣿⢿⣛⣩⠤⠒⠉⠁⠀⠀⠀⠀⠀⠉⠒⢤⡀⠉⠁⠀⠀⠀⠀⠀⢀⡿⠀⠀⠀\n"
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⢿⣤⣤⠴⠟⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠑⠤⠀⠀⠀⠀⠀⢩⠇⠀⠀⠀\n"
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n")
    print("(c) Copyright 2023, Jeannot & Mascarilla")
    print(pyfiglet.figlet_format("Pentest ToolBox"))
    print("1-Scanning")
    print("2-Exploit")
    print("5-Quit")
    choice = input("Choose an option : ")
    if choice == "1":
        scan_submenu()
    elif choice == "2":
        exploit_submenu()
    elif choice == "5":
        sys.exit()
    else:
        print("Invalid option, please try again.")
        main_menu()





main_menu()