##Import des bibliothèques et autres programme##
import pyfiglet
import sys
import webbrowser
from datetime import datetime

import requests

from MODULES.pdfGeneral import vulnnmap, simplify_vulnnmap2, \
    markdown2pdf
from MODULES.ScanPort import Nmap_silent, NmapC
from MODULES.sshSimpleBrutForce import sshSimpleBruteForce
from MODULES.sshSimpleBrutForce import ftpsSimpleBruteForce
from MODULES.sshSimpleBrutForce import ftpSimpleBruteForce
from MODULES.searchsploitCli import exploitdbSearch, googledorkgenerator, formatUrl
from MODULES.pdfGeneral import generate_markdown
from MODULES.osint import website_search
from MODULES.osint import dirbuster_cli
from MODULES.Holele import affiche_holele

##Scanning Menu##
# Definition de la fonction permettant d'afficher le menu de scan
def scan_submenu():
    # Affichage de Scanning Menu en Ascii art
    print(pyfiglet.figlet_format("Scanning Menu", font="slant"))
    # Affichage des options disponible pour l'utilisateur dans le menu
    print("1-NMAP classic")
    print("2-NMAP silent MUST BE ROOT")
    print("3-Back to main menu")
    print("q-Quit")
    # Demande à l'utilisateur son choix
    choice = input("Choose an option : ")
    # en fonction du choix de l'utilisateur affiche le type de scan
    if choice == "1":
        # Demande à l'utilisateur l'ip qu'il faut scanner
        target = str(input("Set target IP\n> "))
        resultat = NmapC(target)
        varvulnmap = vulnnmap(resultat)
        nmapWithVuln = simplify_vulnnmap2(varvulnmap)
        ip = ''
        listservice = []
        passworddict = []
        for key, value in nmapWithVuln.items():
            if ip != key.split(':')[0]:
                ip = key.split(':')[0]
                hostname = (' '.join(key.split(':')[1:])).split(' - ')
                print('-' * 20)
                if len(hostname) > 1:
                    print(key.split(':')[0] + ' ' + ''.join(hostname[-1]))
                else:
                    print(key.split(':')[0])
                print('-' * 20)
                print('Port\tService Version\t\tExploit')
            service = (''.join(' '.join(key.split(':')[1:]).split(' - ')[0::-2])).replace(' ', '\t\t', 1).replace(' ',
                                                                                                                  '\t',
                                                                                                                  -1)
            if not value:
                exploit = 0
            else:
                exploit = len(value)
            print('{service:<14} {exploit}'.format(service=service, exploit=exploit))
            listservice.append(service)

        if nmapWithVuln.keys():
            print('--------------------')

        for key in nmapWithVuln.keys():
            service = (''.join(' '.join(key.split(':')[1:]).split(' - ')[0::-2])).replace(' ', '\t\t', 1).replace(' ',
                                                                                                                  '\t',
                                                                                                                  -1)
            servicePort = (key.split(':')[1]).split(' ')[0]
            serviceServer = (key.split(':')[0])

            if "SSH" in (service).upper():
                print(f'SSH Server detect on port {servicePort} on {serviceServer}')
                confirm = input('Do you want test default Password ? (y/n) ')
                if confirm == 'y' or confirm == 'yes':
                    password = sshSimpleBruteForce(serviceServer, servicePort)
                    if password:
                        passworddict.append((key, password))
                    else:
                        passworddict.append((key, False))

            elif "FTP" in (service).upper():
                print(f'FTP Server detect on port {servicePort} on {serviceServer}')
                confirm = input('Do you want test default Password ? (y/n)')
                if confirm == 'y' or confirm == 'yes':
                    ftpSimpleBruteForce(serviceServer, servicePort)
                    if password:
                        passworddict.append((key, password))
                    else:
                        passworddict.append((key, False))

        export_submenu(resultat, nmapWithVuln, passworddict)
    elif choice == "2":
        target = str(input("Set target IP\n> "))
        print(Nmap_silent(target))
        input("Press Enter to continue...")
        scan_submenu()
    elif choice == "3":
        main_menu()
    elif choice == "q":
        exit_toolbox()


    else:
        print("Invalid option, please try again.")
        scan_submenu()


##Export Section##
def export_submenu(nmap, nmapWithVuln, passworddict=''):
    print('0 - Return to Scan Menu')
    print('1 - Export to pdf')
    print('2 - Show vuln')
    print('q - Quit')
    choice = input("Choose an option : ")
    if choice == "0":
        scan_submenu()
    elif choice == "1":
        now = datetime.now()
        date_time_str = now.strftime("%d%m%Y%H%M")
        exit = input("Put the path where you want to save the file (ex:/home/) : ")
        exit += "Exploit " + date_time_str + ".pdf"
        markdown2pdf(generate_markdown(nmap, passworddict), exit)
        scan_submenu()
    elif choice == "2":
        dropkeylist = []
        for key, value in nmapWithVuln.items():
            if not len(value):
                dropkeylist += [key]
        for dropkey in dropkeylist:
            del nmapWithVuln[dropkey]
        if len(nmapWithVuln):
            for (i, item) in enumerate(nmapWithVuln.keys(), start=0):
                print('{i}) {item}'.format(i=i, item=item))
            choice = input('choose the service whose vulnerabilities you want to see : ')
            keychoise = list(nmapWithVuln.keys())[int(choice)]
            print("\n".join(["".join(i) for i in nmapWithVuln[keychoise]]))

        else:
            print('no vuln as been detected')
        input('press enter to return to export menu : ')
        export_submenu(nmap, nmapWithVuln)
    elif choice == "q":
        exit_toolbox()
    else:
        print("Invalid option, please try again.")
        export_submenu(nmap, nmapWithVuln, passworddict='')


##Définition de la fonction exploit_submenu()##
def exploit_submenu():
    # Affichage du titre "Exploit Menu" en ASCII art
    print(pyfiglet.figlet_format("Exploit Menu", font="slant"))
    # Affichage des différentes options de menu
    print("1-Vuln discover")
    print("2-Brut Force")
    print("3-Domain Investigation")
    print("4-Ressources")
    print("5-GDorks Generator")
    print("6-Dirbuster")
    print("7-Investigate Email with Holele")
    print("8-Back to main menu")
    print("q-Quit")
    # Récupération du choix de l'utilisateur
    choice = input("Choose an option : ")
    # Si l'utilisateur choisit l'option "1"
    if choice == "1":
        # Demande à l'utilisateur de saisir le service et la version pour lesquels il souhaite trouver des vulnérabilités
        targetService = input('Enter the service and version for which you want to find vulnerabilities : ')
        # Recherche de vulnérabilités pour le service et la version donnés en utilisant la fonction exploitdbSearch()
        for vuln in exploitdbSearch(targetService):
            # Affichage des résultats de la recherche
            print("{nom} - {type} \t\t\t - Path to exploit : {file}".format(nom=vuln['titre'], type=vuln['type'],
                                                                            file=vuln['fichier']))
        # Attente d'une action de l'utilisateur avant de retourner au sous-menu exploit_submenu()
        input('Press Enter for return to submenu')
        exploit_submenu()

    # Si l'utilisateur choisit l'option "2"
    elif choice == "2":
        # Appel de la fonction brutforce_submenu()
        brutforce_submenu()

    # Si l'utilisateur choisit l'option "3"
    elif choice == "3":
        # Appel de la fonction osint_submenu()
        domain_investigation_submenu()

    # Si l'utilisateur choisit l'option "4"
    elif choice == "4":
        # Affichage de différents liens utiles pour la recherche de ressources en sécurité informatique
        print(pyfiglet.figlet_format('Ressources'))
        print("Osint Framework : https://osintframework.com/")
        print("Mitre Attack : https://attack.mitre.org/")
        print("OWASP top Ten : https://owasp.org/www-project-top-ten/")
        print(
            "OWASP Method : https://owasp.org/www-project-web-security-testing-guide/latest/3-The_OWASP_Testing_Framework/1-Penetration_Testing_Methodologies")
        # Attente d'une action de l'utilisateur avant de retourner au menu principal main_menu()
        input('Press enter to continue...')
        main_menu()
    # Gestion du choix 5 : GDorks Generator
    elif choice == "5":
        # Création d'une instance de la classe GoogledorkGenerator
        googleExemple = googledorkgenerator()
        # Initialisation des choix
        choicegd = 0
        choicepr = input('Do you want use preset ? (y/n)')

        # Si l'utilisateur veut utiliser les preset
        if choicepr == 'y':
            googleExemple.presetDork()

        # Tant que l'utilisateur ne quitte pas
        while choicegd != '7':
            # Affichage des options
            print(f'1) Definir In Title : {googleExemple.inTitle}')
            print(f'2) Definir In URL : {googleExemple.inUrl}')
            print(f'3) Definir Domain : {googleExemple.domain}')
            print(f'4) Definir FileType : {googleExemple.fileType}')
            print(f'5) Definir Text : {googleExemple.textQuarry}')
            print(f'6) Generate Gdorcs')
            print(f'7) Quit')

            # Demande du choix de l'utilisateur
            choicegd = input('Choose an option : ')

            # Gestion du choix de l'utilisateur
            if choicegd == '1':
                value = input('Enter Value : ')
                googleExemple.setTitle(value)
            elif choicegd == '2':
                value = input('Enter Value : ')
                googleExemple.setUrl(value)
            elif choicegd == '3':
                value = input('Enter Value : ')
                googleExemple.setDomain(value)
            elif choicegd == '4':
                value = input('Enter Value : ')
                googleExemple.setFileType(value)
            elif choicegd == '5':
                value = input('Enter Value : ')
                googleExemple.setText(value)
            elif choicegd == '6':
                # Génération des GDorks avec les paramètres choisis
                gdork = googleExemple.generate()
                # Affichage des résultats
                print('Your GDorks is ready')
                print(f'Url Format : {formatUrl(gdork)}')
                print(f'Raw Format : {gdork}')
                print('Click or copy this Gdork in your browser !')
                choicegd = '7'

        # Retour au menu Exploit
        input('Press enter to return to exploit menu')
        exploit_submenu()


    # Gestion du choix 6 : Dirbuster
    elif choice == "6":

        print(pyfiglet.figlet_format('Dirbuster'))

        # Lancement de Dirbuster en mode CLI

        dirbuster_cli()

        exploit_submenu()

    # Gestion du choix 6 : affiche_holele
    elif choice == "7":
        # Cette fonction recherche des informations sur "holele".
        affiche_holele()

        # La fonction "input" met en pause le programme et attend que l'utilisateur appuie sur la touche "Entrée".
        # C'est une façon de permettre à l'utilisateur de savoir qu'il peut retourner au menu principal quand il est prêt.
        input('Appuyez sur Entrée pour retourner au menu principal')

        # Enfin, la fonction "main_menu()" est appelée pour afficher à nouveau les options du menu principal.
        main_menu()

    # Gestion du choix 7 : Retour au menu principal
    elif choice == "8":
        main_menu()

    # Gestion du choix 'q' : Quitter l'outil
    elif choice == "q":
        exit_toolbox()

    # Si l'utilisateur choisit une option invalide
    else:
        print("Invalid option, please try again.")
        # Retour au menu Exploit
        exploit_submenu()

##Bruteforce section##
def brutforce_submenu():
    # Affichage du titre du menu bruteforce avec pyfiglet
    print(pyfiglet.figlet_format("Brut Force Menu", font="slant"))

    # Affichage des options du menu
    print("1-SSH")
    print("2-FTP")
    print("3-FTPS")
    print("4-Back to main menu")
    print("q-Quit")

    # L'utilisateur doit choisir une option
    choice = input("Choose an option : ")

    # Si l'utilisateur choisit SSH, on lui demande l'adresse IP de la cible et on exécute la fonction sshSimpleBruteForce
    if choice == "1":
        targetIP = str(input("Set target IP\n> "))
        while True :
            default = input('Do you want to use default port ? (y/n)\n> ')
            if default == 'y' or default == 'yes':
                targetPort = "22"
                sshSimpleBruteForce(targetIP, targetPort)
                input("Press Enter to continue...")
            elif default == 'n' or default == 'no':
                targetPort = str(input("Set target Port\n> "))
                sshSimpleBruteForce(targetIP, targetPort)
                input("Press Enter to continue...")
            else:
                print("Invalid option, please try again.")
            brutforce_submenu()

    # Si l'utilisateur choisit FTP, on lui demande l'adresse IP de la cible et on exécute la fonction ftpSimpleBruteForce
    elif choice == "2":
        targetIP = str(input("Set target IP\n> "))
        while True :
            default = input('Do you want to use default port ? (y/n)\n> ')
            if default == 'y' or default == 'yes':
                targetPort = "21"
                ftpSimpleBruteForce(targetIP, targetPort)
                input("Press Enter to continue...")
            elif default == 'n' or default == 'no':
                targetPort = str(input("Set target Port\n> "))
                ftpSimpleBruteForce(targetIP, targetPort)
                input("Press Enter to continue...")
            else:
                print("Invalid option, please try again.")
            brutforce_submenu()

    # Si l'utilisateur choisit FTPS, on lui demande l'adresse IP de la cible et on exécute la fonction ftpsSimpleBruteForce
    elif choice == "3":
        targetIP = str(input("Set target IP\n> "))
        while True :
            default = input('Do you want to use default port ? (y/n)\n> ')
            if default == 'y' or default == 'yes':
                targetPort = "990"
                ftpsSimpleBruteForce(targetIP, targetPort)
                input("Press Enter to continue...")
            elif default == 'n' or default == 'no':
                targetPort = str(input("Set target Port\n> "))
                ftpsSimpleBruteForce(targetIP, targetPort)
                input("Press Enter to continue...")
            else:
                print("Invalid option, please try again.")
            brutforce_submenu()

    # Si l'utilisateur choisit "Back to main menu", on retourne au menu principal
    elif choice == "4":
        main_menu()

    # Si l'utilisateur choisit "q", on quitte le programme
    elif choice == "q":
        exit_toolbox()

    # Si l'utilisateur entre une option invalide, on lui affiche un message d'erreur et on retourne au menu bruteforce
    else:
        print("Invalid option, please try again.")
        brutforce_submenu()


# Cette fonction est utilisée pour afficher un sous-menu qui permet à l'utilisateur de faire une recherche sur un nom de domaine d'une entreprise.
def domain_investigation_submenu():
    # Demande à l'utilisateur d'entrer le nom de domaine de l'entreprise qu'il souhaite rechercher.
    domain_name = input("Enter a website company name (ex:supdevinci.fr) : ")

    # Utilise la fonction website_search pour effectuer une recherche sur le nom de domaine de l'entreprise et stocke le résultat dans la variable res.
    res = website_search(domain_name)

    # Affiche le résultat de la recherche.
    print(res)

    # Attend que l'utilisateur appuie sur Entrée pour continuer.
    input("Press Enter to continue...")

    # Retourne au menu principal.
    main_menu()


# Cette fonction est utilisée pour afficher un message de remerciement à l'utilisateur et quitter l'application.

def exit_toolbox():
    # Affiche un message de remerciement à l'utilisateur pour avoir utilisé l'application.
    print("Thank you for using our ToolBox")

    # Quitte l'application en utilisant la fonction exit() du module sys.
    sys.exit()


##Main execution##
def main_menu():
    print("⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⡠⢤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡴⠟⠃⠀⠀⠙⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠋⠀⠀⠀⠀⠀⠀⠘⣆⠀⠀⠀⠀⠀⠀⠀⠀\n"
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠾⢛⠒⠀⠀⠀⠀⠀⠀⠀⢸⡆⠀⠀⠀⠀⠀⠀⠀\n"
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣶⣄⡈⠓⢄⠠⡀⠀⠀⠀⣄⣷⠀⠀⠀⠀⠀⠀⠀\n"
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣷⠀⠈⠱⡄⠑⣌⠆⠀⠀⡜⢻⠀⠀⠀⠀⠀⠀⠀\n"
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⡿⠳⡆⠐⢿⣆⠈⢿⠀⠀⡇⠘⡆⠀⠀⠀⠀⠀⠀\n"
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⣿⣷⡇⠀⠀⠈⢆⠈⠆⢸⠀⠀⢣⠀⠀⠀⠀⠀⠀\n"
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣧⠀⠀⠈⢂⠀⡇⠀⠀⢨⠓⣄⠀⠀⠀⠀\n"
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⣿⣦⣤⠖⡏⡸⠀⣀⡴⠋⠀⠈⠢⡀⠀⠀\n"
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⠁⣹⣿⣿⣿⣷⣾⠽⠖⠊⢹⣀⠄⠀⠀⠀⠈⢣⡀\n"
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡟⣇⣰⢫⢻⢉⠉⠀⣿⡆⠀⠀⡸⡏⠀⠀⠀⠀⠀⠀⢇\n"
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢨⡇⡇⠈⢸⢸⢸⠀⠀⡇⡇⠀⠀⠁⠻⡄⡠⠂⠀⠀⠀⠘\n"
          "⢤⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠛⠓⡇⠀⠸⡆⢸⠀⢠⣿⠀⠀⠀⠀⣰⣿⣵⡆⠀⠀⠀⠀\n"
          "⠈⢻⣷⣦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡿⣦⣀⡇⠀⢧⡇⠀⠀⢺⡟⠀⠀⠀⢰⠉⣰⠟⠊⣠⠂⠀⡸\n"
          "⠀⠀⢻⣿⣿⣷⣦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⢧⡙⠺⠿⡇⠀⠘⠇⠀⠀⢸⣧⠀⠀⢠⠃⣾⣌⠉⠩⠭⠍⣉⡇\n"
          "⠀⠀⠀⠻⣿⣿⣿⣿⣿⣦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣞⣋⠀⠈⠀⡳⣧⠀⠀⠀⠀⠀⢸⡏⠀⠀⡞⢰⠉⠉⠉⠉⠉⠓⢻⠃\n"
          "⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣷⡄⠀⠀⢀⣀⠠⠤⣤⣤⠤⠞⠓⢠⠈⡆⠀⢣⣸⣾⠆⠀⠀⠀⠀⠀⢀⣀⡼⠁⡿⠈⣉⣉⣒⡒⠢⡼⠀\n"
          "⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣎⣽⣶⣤⡶⢋⣤⠃⣠⡦⢀⡼⢦⣾⡤⠚⣟⣁⣀⣀⣀⣀⠀⣀⣈⣀⣠⣾⣅⠀⠑⠂⠤⠌⣩⡇⠀\n"
          "⠀⠀⠀⠀⠀⠀⠘⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡁⣺⢁⣞⣉⡴⠟⡀⠀⠀⠀⠁⠸⡅⠀⠈⢷⠈⠏⠙⠀⢹⡛⠀⢉⠀⠀⠀⣀⣀⣼⡇⠀\n"
          "⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣿⣿⣿⣿⣿⣿⣿⣿⣽⣿⡟⢡⠖⣡⡴⠂⣀⣀⣀⣰⣁⣀⣀⣸⠀⠀⠀⠀⠈⠁⠀⠀⠈⠀⣠⠜⠋⣠⠁⠀\n"
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⡟⢿⣿⣿⣷⡟⢋⣥⣖⣉⠀⠈⢁⡀⠤⠚⠿⣷⡦⢀⣠⣀⠢⣄⣀⡠⠔⠋⠁⠀⣼⠃⠀⠀\n"
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣿⣿⡄⠈⠻⣿⣿⢿⣛⣩⠤⠒⠉⠁⠀⠀⠀⠀⠀⠉⠒⢤⡀⠉⠁⠀⠀⠀⠀⠀⢀⡿⠀⠀⠀\n"
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⢿⣤⣤⠴⠟⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠑⠤⠀⠀⠀⠀⠀⢩⠇⠀⠀⠀\n"
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n")

    print("(c) Copyright 2023, Jeannot & Mascarilla")
    print(pyfiglet.figlet_format("Pentest ToolBox", font="slant"))
    print("1-Scanning")
    print("2-Exploit")
    print("h-Help")
    print("q-Quit")
    print("4-Sanity assistant 🌞")
    choice = input("Choose an option : ")
    if choice == "1":
        scan_submenu()
    elif choice == "2":
        exploit_submenu()
    elif choice == "h":
        print("The Readme will open in your browser. If it does not, copy and paste the following link : ")
        url = "https://github.com/Bibulbe/Projet_Fin_Etude/blob/main/README.md"
        print(url)
        webbrowser.open(url)
        input("Press enter to continue")
        main_menu()
    elif choice == "q":
        exit_toolbox()
    elif choice == "4":
        r = requests.get('https://wttr.in/')
        print((r.text).replace('Follow [46m[30m@igor_chubin[0m for wttr.in updates', ''))
        print('For you\'r care touch' + '\033[92m' + '\033[1m' + ' green' + '\033[0m')
        input('Press enter :')
        main_menu()
    else:
        print("Invalid option, please try again.")
        main_menu()


if __name__ == "__main__":
    main_menu()
